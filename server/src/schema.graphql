scalar DateTime

type SuccessMessage {
  message: String
}

type Query {
  me: User
  user(id: ID!): User
  users: [User!]!
  event(id: ID!): Event
  activeEvents: [Event!]!
  inactiveEvents: [Event!]!
  events: [Event!]!
}

type Mutation {
  signup(email: String!, password: String!, name: String!): User!
  login(email: String!, password: String!): User!
  logout: SuccessMessage
  activateAccount: SuccessMessage
  confirmAccount(token: String!): User!
  setProfile(year: String!, gender: String!, can_drive: Boolean!, max_capacity: Int!): User!
  updateProfile(year: String, gender: String, can_drive: Boolean, max_capacity: Int): SuccessMessage
  resetRequest(email: String!): SuccessMessage
  resetPassword(token: String!, password: String!): User!
  createEvent(
    name: String!
    max_participants: Int!
    start_location: String!
    end_location: String!
    event_date: DateTime!
  ): Event!
  updateEvent(
    id: Int!
    name: String
    max_participants: Int
    start_location: String
    end_location: String
    event_date: DateTime
  ): SuccessMessage
  deleteEvent(event_id: Int!): SuccessMessage
  register(event_id: Int!): Registration!
  unregister(event_id: Int!): SuccessMessage
}

type User {
  id: ID!
  email: String!
  name: String!
  password: String!
  registered_on: DateTime!
  confirmed_on: DateTime
  year: String
  gender: String
  can_drive: Boolean!
  max_capacity: Int!
  updated_on: DateTime!
  confirmed: Boolean!
  events: [Event!]!
  active_events: [Event!]!
  inactive_events: [Event!]!
}

type Event {
  id: ID!
  name: String!
  max_participants: Int!
  start_location: String!
  end_location: String!
  event_date: DateTime!
  is_active: Boolean!
  created_on: DateTime!
  updated_on: DateTime!
  user: User!
}

type Registration {
  user_id: Int!
  event_id: Int!
  event: Event!
  user: User!
}
